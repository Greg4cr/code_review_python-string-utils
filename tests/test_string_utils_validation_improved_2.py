# Automatically generated by Pynguin.
import pytest
import string_utils.validation as module_0
import codecs as module_1
import builtins as module_2

# test_case_0
@pytest.mark.parametrize("input_string, expected_result", [
    ("\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    ", False),
])
def test_is_isbn_10(input_string, expected_result):
    """
    Test the 'is_isbn_10' function of the 'validation' module.

    This test checks if the function correctly validates whether a provided string
    adheres to the ISBN-10 format.

    Coverage:
    This test covers the 'is_isbn_10' function of the 'validation' module.
    """
    # Setup: No setup required for this test case.

    # Execution: Call the function with the test parameters.
    result = module_0.is_isbn_10(input_string)

    # Assertion: Check if the result is as expected.
    assert result == expected_result

# test_case_9
# @pytest.mark.xfail(strict=True)
def test_isbn_and_related_string_validations():
    """
    Test various string validation methods of the 'validation' module.

    This test checks the behavior of the 'is_isbn', 'is_full_string', 'words_count',
    'is_string', 'is_camel_case', 'is_ip_v4', 'is_palindrome', 'is_integer',
    'is_isbn_13', and 'is_ip' functions for various input cases.

    Coverage:
    This test covers multiple functions of the 'validation' module.
    """
    # Setup: Define the test cases.
    isbn_input = 'LHe(SF%!\r"'
    count_word_input_1 = "^3U\\"
    count_word_input_2 = "{7ax#p9"
    camel_case_input = isbn_input
    palindrome_input = "8"
    integer_input = palindrome_input
    isbn_13_input = "!Cay2D"
    ip_input = isbn_13_input

    # Execution: Call the functions with the test cases.
    isbn_result = module_0.is_isbn(isbn_input)
    full_string_result_1 = module_0.is_full_string(isbn_result)
    count_words_result_1 = module_0.words_count(count_word_input_1)
    count_words_result_2 = module_0.words_count(count_word_input_2)
    full_string_result_2 = module_0.is_full_string(isbn_input)
    camel_case_result = module_0.is_camel_case(camel_case_input) # Original, was isbn_result
    ip_v4_result = module_0.is_ip_v4(camel_case_input)
    palindrome_result = module_0.is_palindrome(palindrome_input, ignore_case=True)
    integer_result = module_0.is_integer(integer_input)
    isbn_13_result = module_0.is_isbn_13(isbn_13_input, False)
    ip_result = module_0.is_ip(ip_input)

    # Assertion: Check if the results are as expected.
    assert isbn_result is False
    assert full_string_result_1 is False
    assert count_words_result_1 == 1
    assert count_words_result_2 == 2
    assert full_string_result_2 is True
    assert camel_case_result is False
    assert ip_v4_result is False
    assert palindrome_result is True
    assert integer_result is True
    assert isbn_13_result is False
    assert ip_result is False

# test_case_10
def test_integer_validation():
    """
    Test the 'is_integer' function of the 'validation' module.

    This test checks if the function correctly validates whether a provided string
    represents an integer.

    Coverage:
    This test covers the 'is_integer' function of the 'validation' module.
    """
    # Setup: Define the test input.
    input_string = "X"

    # Execution: Call the function with the test input.
    result = module_0.is_integer(input_string)

    # Assertion: Check if the result is as expected.
    assert result is False


# test_case_20
def test_json_validation_for_none():
    """
    Test the 'is_json' function of the 'validation' module.

    This test checks if the function correctly identifies 'None' as not being a valid JSON string.

    Coverage:
    This test covers the 'is_json' function of the 'validation' module.
    """
    # Setup: Define the test input.
    input_value = None

    # Execution: Call the function with the test input.
    result = module_0.is_json(input_value)

    # Assertion: Check if the result is as expected.
    assert result is False


# test_case_26
def test_various_string_validations():
    """
    Test various string validation methods of the 'validation' module.

    This test checks the behavior of the 'is_ip', 'is_ip_v4', 'is_email',
    'contains_html', 'is_isbn_10', 'is_integer', 'is_isogram', 'is_pangram',
    'is_palindrome', 'is_isbn', 'is_json', 'is_credit_card', and 'is_url' functions for various input cases.

    Coverage:
    This test covers multiple functions of the 'validation' module.
    """
    # Setup: Define the test cases.
    ip_input = "roman_encode"
    ip_v4_input = ""
    email_input = ip_input
    html_input = ip_v4_input
    isbn_10_input = "do!Cg$[!i"
    integer_input = ip_v4_input
    isogram_input = ip_input
    pangram_input = isbn_10_input
    palindrome_input = "3(pkRw=\nC"
    isbn_input = "G4ma:IP#O\rdS&"
    json_input = ip_input
    credit_card_input = False
    url_input = palindrome_input

    # Execution: Call the functions with the test cases.
    ip_result = module_0.is_ip(ip_input)
    ip_v4_result = module_0.is_ip_v4(ip_v4_input)
    email_result = module_0.is_email(email_input)
    html_result = module_0.contains_html(html_input)
    isbn_10_result = module_0.is_isbn_10(isbn_10_input, True)
    integer_result = module_0.is_integer(integer_input)
    isogram_result = module_0.is_isogram(isogram_input)
    pangram_result = module_0.is_pangram(pangram_input)
    palindrome_result = module_0.is_palindrome(palindrome_input, ignore_case=False)
    isbn_result = module_0.is_isbn(isbn_input)
    json_result = module_0.is_json(json_input)
    credit_card_result = module_0.is_credit_card(credit_card_input)
    url_result = module_0.is_url(url_input)

    # Assertion: Check if the results are as expected.
    assert ip_result is False
    assert ip_v4_result is False
    assert email_result is False
    assert html_result is False
    assert isbn_10_result is False
    assert integer_result is False
    assert isogram_result is False
    assert pangram_result is False
    assert palindrome_result is False
    assert isbn_result is False
    assert json_result is False
    assert credit_card_result is False
    assert url_result is False

# test_case_34
def test_word_count():
    """
    Test the 'words_count' function of the 'validation' module.

    This test checks if the function correctly counts the number of words in a given string.

    Coverage:
    This test covers the 'words_count' function of the 'validation' module.
    """
    # Setup: Define the test input.
    input_string = ",@pJ Vu"

    # Execution: Call the function with the test input.
    result = module_0.words_count(input_string)

    # Assertion: Check if the result is as expected.
    assert result == 2

# test_case_38
def test_single_character_palindrome():
    """
    Test the 'is_palindrome' function of the 'validation' module.

    This test checks if the function correctly identifies a single character string as a palindrome.

    Coverage:
    This test covers the 'is_palindrome' function of the 'validation' module.
    """
    # Setup: Define the test input.
    input_string = "X"

    # Execution: Call the function with the test input.
    result = module_0.is_palindrome(input_string)

    # Assertion: Check if the result is as expected.
    assert result is True

# test_case_39
def test_various_string_validations_with_non_standard_inputs():
    """
    Test various string validation methods of the 'validation' module with non-standard inputs.

    This test checks the behavior of the 'is_string', 'is_isbn', 'is_email',
    'is_snake_case', 'is_isogram', 'is_palindrome', 'is_ip', 'is_json', and 'is_url' functions for various non-standard input cases.

    Coverage:
    This test covers multiple functions of the 'validation' module.
    """
    # Setup: Define the test cases.
    string_input = "1@ICt62C$dV _W]!){\nw"
    isbn_input = "wC^x%ZBWz\x0c"
    email_input = string_input
    snake_case_input = string_input
    isogram_input = string_input
    palindrome_input_1 = string_input
    palindrome_input_2 = "3:p=kRw=\nC"
    ip_input = False
    json_input = ")Wk5&;Vwjr^"
    url_input = "3:p=kRw=\nC"
    isbn_checker_input = ")Wk5&;Vwjr^"

    # Execution: Call the functions with the test cases.
    string_result = module_0.is_string(string_input)
    isbn_result = module_0.is_isbn(isbn_input)
    email_result = module_0.is_email(email_input)
    snake_case_result = module_0.is_snake_case(snake_case_input)
    isogram_result = module_0.is_isogram(isogram_input)
    palindrome_result_1 = module_0.is_palindrome(palindrome_input_1, string_result, True)
    palindrome_result_2 = module_0.is_palindrome(palindrome_input_2, email_result)
    ip_result = module_0.is_ip(ip_input)
    json_result = module_0.is_json(json_input)
    url_result = module_0.is_url(url_input, 295.529)
    isbn_checker = module_0.__ISBNChecker(isbn_checker_input)

    # Assertion: Check if the results are as expected.
    assert string_result is True
    assert isbn_result is False
    assert email_result is False
    assert snake_case_result is False
    assert isogram_result is False
    assert palindrome_result_1 is False
    assert palindrome_result_2 is False
    assert ip_result is False
    assert json_result is False
    assert url_result is False
    assert isbn_checker.input_string == isbn_checker_input

# test_case_43
def test_various_string_and_isbn_validations_with_non_standard_inputs():
    """
    Test various string and ISBN validation methods of the 'validation' module with non-standard inputs.

    This test checks the behavior of the 'is_url', 'is_slug', 'is_ip_v4',
    'is_email', 'is_isbn_13', 'is_json', 'contains_html', 'is_uuid', and 'is_decimal' functions for various non-standard input cases.

    Coverage:
    This test covers multiple functions of the 'validation' module.
    """
    # Setup: Define the test cases.
    string_input = "QsNAo1:8Avr2TI"
    slug_input = string_input
    isbn_input = "slugify"
    url_input = isbn_input

    # Execution: Instantiate the ISBNChecker class and call the functions with the test cases.
    isbn_checker = module_0.__ISBNChecker(string_input)
    url_result = module_0.is_url(string_input, isbn_checker)
    slug_result = module_0.is_slug(string_input, slug_input)
    isbn_13_result = isbn_checker.is_isbn_13()
    ip_v4_result = module_0.is_ip_v4(isbn_checker)
    email_result = module_0.is_email(isbn_checker)
    isbn_10_result = isbn_checker.is_isbn_10()
    isbn_13_input_result = module_0.is_isbn_13(isbn_input, False)
    json_result = module_0.is_json(ip_v4_result)
    html_result = module_0.contains_html(string_input)
    uuid_result = module_0.is_uuid(isbn_10_result)
    decimal_result = module_0.is_decimal("2dk$%phP|`\\GZglV-ZmY")

    # Assertion: Check if the results are as expected.
    assert isbn_checker.input_string == string_input
    assert url_result is False
    assert slug_result is False
    assert isbn_13_result is False
    assert ip_v4_result is False
    assert email_result is False
    assert isbn_10_result is False
    assert isbn_13_input_result is False
    assert json_result is False
    assert html_result is False
    assert uuid_result is False
    assert decimal_result is False

# test_case_48
def test_various_string_and_isbn_validations_with_special_inputs():
    """
    Test various string and ISBN validation methods of the 'validation' module with special inputs.

    This test checks the behavior of the 'is_string', 'is_email', 'is_snake_case',
    'is_isogram', 'is_palindrome', 'is_decimal', 'is_json', and 'is_url' functions for various special input cases.

    Coverage:
    This test covers multiple functions of the 'validation' module.
    """
    # Setup: Define the test cases.
    string_input = "1@ICt62C$dV _W]!){\nw"
    email_input = string_input
    snake_case_input = string_input
    isogram_input = string_input
    palindrome_input = string_input
    decimal_input = "'\t?H+\"\"\"@"
    json_input = decimal_input
    url_input = "wC^x%ZBWz\x0c"

    # Execution: Call the functions with the test cases.
    string_result = module_0.is_string(string_input)
    email_result = module_0.is_email(email_input)
    snake_case_result = module_0.is_snake_case(snake_case_input)
    isogram_result = module_0.is_isogram(isogram_input)
    palindrome_result = module_0.is_palindrome(palindrome_input, string_result, isogram_result)
    decimal_result = module_0.is_decimal(decimal_input)
    json_result = module_0.is_json(json_input)
    url_result = module_0.is_url(url_input, 295.529)

    # Assertion: Check if the results are as expected.
    assert string_result is True
    assert email_result is False
    assert snake_case_result is False
    assert isogram_result is False
    assert palindrome_result is False
    assert decimal_result is False
    assert json_result is False
    assert url_result is False
