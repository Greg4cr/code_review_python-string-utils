# Automatically generated by Pynguin.
import pytest
import string_utils.validation as module_0
import codecs as module_1
import builtins as module_2

# test_case_0
def test_isbn_10_validation():
    # Test to check the validation of isbn_10 format for a given string.
    # Setup: Define a test string which is not a valid isbn_10
    test_string = "\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    "

    # Execution: Check if the string is a valid isbn_10 format
    is_valid = module_0.is_isbn_10(test_string)

    # Assertion: The string is not a valid isbn_10, so the function should return False
    assert is_valid is False

    # Code Coverage: This test case covers the is_isbn_10 function in the validation module


# test_case_9
#@pytest.mark.xfail(strict=True)
def test_various_validations():
    # Test to check various validation functions in the module.

    # Setup: Define the test variables
    test_isbn_string = 'LHe(SF%!\r"'
    test_string_1 = "^3U\\"
    test_string_2 = "!Cay2D"
    test_string_3 = "{7ax#p9"
    test_string_4 = "8"
    value_error_test = module_2.ValueError()
    bool_false = False
    bool_true = True

    # Execution: Check the validation functions
    is_valid_isbn = module_0.is_isbn(test_isbn_string)
    is_valid_full_string_isbn = module_0.is_full_string(is_valid_isbn)
    words_count_1 = module_0.words_count(test_string_1)
    is_valid_string_error = module_0.is_string(value_error_test)
    words_count_2 = module_0.words_count(test_string_3)
    is_valid_full_string_test_string = module_0.is_full_string(test_isbn_string)
    is_valid_camel_case_isbn = module_0.is_camel_case(is_valid_isbn)
    is_valid_ip_v4_test_string = module_0.is_ip_v4(test_isbn_string)
    is_valid_palindrome = module_0.is_palindrome(test_string_4, ignore_case=bool_true)
    is_valid_integer = module_0.is_integer(test_string_4)
    is_valid_isbn_13 = module_0.is_isbn_13(test_string_2, bool_false)
    is_valid_ip = module_0.is_ip(test_string_2)

    # Assertions: Check the returned values from the validation functions
    assert is_valid_isbn is False
    assert is_valid_full_string_isbn is False
    assert words_count_1 == 1
    assert is_valid_string_error is False
    assert words_count_2 == 2
    assert is_valid_full_string_test_string is True
    assert is_valid_camel_case_isbn is False
    assert is_valid_ip_v4_test_string is False
    assert is_valid_palindrome is True
    assert is_valid_integer is True
    assert is_valid_isbn_13 is False
    assert is_valid_ip is False

    # Code Coverage: This test case covers several validation functions in the module,
    # including is_isbn, is_string, is_full_string, words_count, is_camel_case,
    # is_ip_v4, is_palindrome, is_integer, is_isbn_13, and is_ip.

# test_case_10
def test_integer_validation():
    # Test to check the validation of integer values for a given string.
    # Setup: Define a test string which is not a valid integer
    test_string = "X"

    # Execution: Check if the string is a valid integer
    is_integer = module_0.is_integer(test_string)

    # Assertion: The string is not a valid integer, so the function should return False
    assert is_integer is False

    # Code Coverage: This test case covers the is_integer function in the validation module

# test_case_20
def test_json_validation():
    # Test to check the validation of JSON values.
    # Setup: Define a test value which is None
    test_value = None

    # Execution: Check if the value is a valid JSON
    is_json = module_0.is_json(test_value)

    # Assertion: The value is not a valid JSON, so the function should return False
    assert is_json is False

    # Code Coverage: This test case covers the is_json function in the validation module

# test_case_26
def test_various_validations_2():
    # Test to check various validation functions in the module.

    # Setup: Define the test variables
    test_string_1 = "roman_encode"
    test_string_2 = ""
    test_string_3 = "do!Cg$[!i"
    test_string_4 = "3(pkRw=\nC"
    test_string_5 = "G4ma:IP#O\rdS&"
    bool_true = True
    bool_false = False

    # Execution: Check the validation functions
    is_ip = module_0.is_ip(test_string_1)
    is_ip_v4 = module_0.is_ip_v4(test_string_2)
    is_email = module_0.is_email(test_string_1)
    contains_html = module_0.contains_html(test_string_2)
    is_isbn_10 = module_0.is_isbn_10(test_string_3, bool_true)
    is_integer = module_0.is_integer(test_string_2)
    is_isogram = module_0.is_isogram(test_string_1)
    is_pangram = module_0.is_pangram(test_string_3)
    is_palindrome = module_0.is_palindrome(test_string_4, ignore_case=bool_false)
    is_isbn = module_0.is_isbn(test_string_5)
    is_json = module_0.is_json(test_string_1)
    is_credit_card = module_0.is_credit_card(is_palindrome)
    is_url = module_0.is_url(test_string_4)

    # Assertions: Check the returned values from the validation functions
    assert is_ip is False
    assert is_ip_v4 is False
    assert is_email is False
    assert contains_html is False
    assert is_isbn_10 is False
    assert is_integer is False
    assert is_isogram is False
    assert is_pangram is False
    assert is_palindrome is False
    assert is_isbn is False
    assert is_json is False
    assert is_credit_card is False
    assert is_url is False

    # Code Coverage: This test case covers several validation functions in the module,
    # including is_ip, is_ip_v4, is_email, contains_html, is_isbn_10, is_integer,
    # is_isogram, is_pangram, is_palindrome, is_isbn, is_json, is_credit_card, and is_url.

# test_case_34
def test_words_count():
    # Test to check the words_count function in the module.

    # Setup: Define a test string with two words
    test_string = ",@pJ Vu"

    # Execution: Count the number of words in the string
    word_count = module_0.words_count(test_string)

    # Assertion: The string contains two words, so the function should return 2
    assert word_count == 2

    # Code Coverage: This test case covers the words_count function in the validation module

# test_case_38
def test_single_character_palindrome():
    # Test to check the is_palindrome function in the module for single character strings.

    # Setup: Define a test string with a single character
    test_string = "X"

    # Execution: Check if the string is a palindrome
    is_palindrome = module_0.is_palindrome(test_string)

    # Assertion: The string is a single character, so the function should return True
    assert is_palindrome is True

    # Code Coverage: This test case covers the is_palindrome function in the validation module for single character strings.

# test_case_39
def test_various_validations_3():
    # Test to check various validation functions in the module.

    # Setup: Define a test strings with random characters
    test_string_1 = "1@ICt62C$dV _W]!){\nw"
    test_string_2 = "wC^x%ZBWz\x0c"
    test_string_3 = ")Wk5&;Vwjr^"
    test_string_4 = "3:p=kRw=\nC"

    # Execution and Assertion:
    # Check if the strings are valid for various validation functions
    assert module_0.is_string(test_string_1) is True
    assert module_0.is_isbn(test_string_2) is False
    assert module_0.is_email(test_string_1) is False
    assert module_0.is_snake_case(test_string_1) is False
    assert module_0.is_isogram(test_string_1) is False
    assert module_0.is_palindrome(test_string_1) is False
    assert module_0.is_palindrome(test_string_4) is False
    assert module_0.is_json(test_string_3) is False
    assert module_0.is_ip(test_string_1) is False

    # Code Coverage: This test case covers various validation functions in the module.

# test_case_43
def test_various_validations_4():
    """
    Test to check various validation functions in the module.
    """

    # Setup: Define a test strings and a instance of __ISBNChecker class
    test_string_1 = "QsNAo1:8Avr2TI"
    isbn_checker = module_0.__ISBNChecker(test_string_1)

    # Execution and Assertion:
    # Check if the strings are valid for various validation functions
    assert isbn_checker.input_string == "QsNAo1:8Avr2TI"
    assert module_0.is_url(test_string_1, isbn_checker) is False
    assert module_0.is_slug(test_string_1, test_string_1) is False
    assert isbn_checker.is_isbn_13() is False
    assert module_0.is_ip_v4(isbn_checker) is False
    assert module_0.is_email(isbn_checker) is False
    assert isbn_checker.is_isbn_10() is False
    assert module_0.is_isbn_13("slugify", False) is False
    assert module_0.is_uuid(module_1.BufferedIncrementalDecoder(), True) is False
    assert module_0.is_json(module_0.is_ip_v4(isbn_checker)) is False
    assert module_0.contains_html(test_string_1) is False
    assert module_0.is_uuid(isbn_checker.is_isbn_10()) is False
    assert module_0.is_isbn_13("slugify") is False
    assert module_0.is_isbn(test_string_1) is False
    assert module_0.is_decimal("2dk$%phP|`\\GZglV-ZmY") is False

    # Code Coverage: This test case covers various validation functions in the module.

# test_case_48
def test_various_validations_5():
    """
    Test to check various validation functions in the module.
    """

    # Setup: Define a test strings and a instance of __ISBNChecker class
    test_string_1 = "1@ICt62C$dV _W]!){\nw"
    test_string_2 = "wC^x%ZBWz\x0c"
    isbn_checker = module_0.__ISBNChecker(test_string_1)
    isbn_checker_2 = module_0.__ISBNChecker(test_string_1, False)

    # Execution and Assertion:
    # Check if the strings are valid for various validation functions
    assert isbn_checker.input_string == "1@ICt62C$dV _W]!){\nw"
    assert isbn_checker_2.input_string == "1@ICt62C$dV _W]!){\nw"
    assert module_0.is_string(test_string_1) is True
    assert module_0.is_email(test_string_1) is False
    assert module_0.is_snake_case(test_string_1) is False
    assert module_0.is_isogram(test_string_1) is False
    assert module_0.is_palindrome(test_string_1, True, False) is False
    assert module_0.is_decimal("'\t?H+\"\"\"@") is False
    assert module_0.is_palindrome(")Wk5&;Vwjr^", False) is False
    assert module_0.is_json("'\t?H+\"\"\"@") is False
    assert module_0.is_url(test_string_2, 295.529) is False

    # Code Coverage: This test case covers various validation functions in the module.
